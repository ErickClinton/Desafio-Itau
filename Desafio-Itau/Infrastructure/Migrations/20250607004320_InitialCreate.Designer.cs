// <auto-generated />
using System;
using DesafioInvestimentosItau.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DesafioInvestimentosItau.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250607004320_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("DesafioInvestimentosItau.Domain.Entities.AssetEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("code");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("asset", (string)null);
                });

            modelBuilder.Entity("DesafioInvestimentosItau.Domain.Entities.PositionEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AssetId")
                        .HasColumnType("bigint")
                        .HasColumnName("asset_id");

                    b.Property<decimal>("AveragePrice")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("average_price");

                    b.Property<decimal>("ProfitLoss")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("profit_loss");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("UserId");

                    b.ToTable("position", (string)null);
                });

            modelBuilder.Entity("DesafioInvestimentosItau.Domain.Entities.QuoteEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AssetId")
                        .HasColumnType("bigint")
                        .HasColumnName("asset_id");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("timestamp");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("unite_price");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.ToTable("quote", (string)null);
                });

            modelBuilder.Entity("DesafioInvestimentosItau.Domain.Entities.TradeEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AssetId")
                        .HasColumnType("bigint")
                        .HasColumnName("asset_id");

                    b.Property<decimal>("BrokerageFee")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("brokerage_fee");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasColumnName("quantity");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime(6)")
                        .HasColumnName("timestamp");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasColumnName("type");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,4)")
                        .HasColumnName("unit_price");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("UserId");

                    b.ToTable("trade", (string)null);
                });

            modelBuilder.Entity("DesafioInvestimentosItau.Domain.Entities.UserEntity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("BrokerageFee")
                        .HasColumnType("decimal(5,2)")
                        .HasColumnName("brokerage_fee");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("user", (string)null);
                });

            modelBuilder.Entity("DesafioInvestimentosItau.Domain.Entities.PositionEntity", b =>
                {
                    b.HasOne("DesafioInvestimentosItau.Domain.Entities.AssetEntity", "Asset")
                        .WithMany("Positions")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_position_asset_id");

                    b.HasOne("DesafioInvestimentosItau.Domain.Entities.UserEntity", "User")
                        .WithMany("Positions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_position_user_id");

                    b.Navigation("Asset");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DesafioInvestimentosItau.Domain.Entities.QuoteEntity", b =>
                {
                    b.HasOne("DesafioInvestimentosItau.Domain.Entities.AssetEntity", "Asset")
                        .WithMany("Quotes")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_quote_asset_id");

                    b.Navigation("Asset");
                });

            modelBuilder.Entity("DesafioInvestimentosItau.Domain.Entities.TradeEntity", b =>
                {
                    b.HasOne("DesafioInvestimentosItau.Domain.Entities.AssetEntity", "Asset")
                        .WithMany("Trades")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_trade_asset_id");

                    b.HasOne("DesafioInvestimentosItau.Domain.Entities.UserEntity", "User")
                        .WithMany("Trades")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_trade_user_id");

                    b.Navigation("Asset");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DesafioInvestimentosItau.Domain.Entities.AssetEntity", b =>
                {
                    b.Navigation("Positions");

                    b.Navigation("Quotes");

                    b.Navigation("Trades");
                });

            modelBuilder.Entity("DesafioInvestimentosItau.Domain.Entities.UserEntity", b =>
                {
                    b.Navigation("Positions");

                    b.Navigation("Trades");
                });
#pragma warning restore 612, 618
        }
    }
}
